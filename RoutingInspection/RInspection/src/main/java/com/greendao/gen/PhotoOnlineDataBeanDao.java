package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seatrend.routinginspection.entity.PhotoOnlineDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_ONLINE_DATA_BEAN".
*/
public class PhotoOnlineDataBeanDao extends AbstractDao<PhotoOnlineDataBean, Long> {

    public static final String TABLENAME = "PHOTO_ONLINE_DATA_BEAN";

    /**
     * Properties of entity PhotoOnlineDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jhbh = new Property(1, String.class, "jhbh", false, "JHBH");
        public final static Property Rwbh = new Property(2, String.class, "rwbh", false, "RWBH");
        public final static Property Glbm = new Property(3, String.class, "glbm", false, "GLBM");
        public final static Property Zpdz = new Property(4, String.class, "zpdz", false, "ZPDZ");
        public final static Property ZpPath = new Property(5, String.class, "zpPath", false, "ZP_PATH");
    }


    public PhotoOnlineDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoOnlineDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_ONLINE_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"JHBH\" TEXT," + // 1: jhbh
                "\"RWBH\" TEXT," + // 2: rwbh
                "\"GLBM\" TEXT," + // 3: glbm
                "\"ZPDZ\" TEXT," + // 4: zpdz
                "\"ZP_PATH\" TEXT);"); // 5: zpPath
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PHOTO_ONLINE_DATA_BEAN_ZP_PATH ON \"PHOTO_ONLINE_DATA_BEAN\"" +
                " (\"ZP_PATH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_ONLINE_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoOnlineDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jhbh = entity.getJhbh();
        if (jhbh != null) {
            stmt.bindString(2, jhbh);
        }
 
        String rwbh = entity.getRwbh();
        if (rwbh != null) {
            stmt.bindString(3, rwbh);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(4, glbm);
        }
 
        String zpdz = entity.getZpdz();
        if (zpdz != null) {
            stmt.bindString(5, zpdz);
        }
 
        String zpPath = entity.getZpPath();
        if (zpPath != null) {
            stmt.bindString(6, zpPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoOnlineDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String jhbh = entity.getJhbh();
        if (jhbh != null) {
            stmt.bindString(2, jhbh);
        }
 
        String rwbh = entity.getRwbh();
        if (rwbh != null) {
            stmt.bindString(3, rwbh);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(4, glbm);
        }
 
        String zpdz = entity.getZpdz();
        if (zpdz != null) {
            stmt.bindString(5, zpdz);
        }
 
        String zpPath = entity.getZpPath();
        if (zpPath != null) {
            stmt.bindString(6, zpPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoOnlineDataBean readEntity(Cursor cursor, int offset) {
        PhotoOnlineDataBean entity = new PhotoOnlineDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jhbh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rwbh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // glbm
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zpdz
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // zpPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoOnlineDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJhbh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRwbh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGlbm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZpdz(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZpPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoOnlineDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoOnlineDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoOnlineDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
