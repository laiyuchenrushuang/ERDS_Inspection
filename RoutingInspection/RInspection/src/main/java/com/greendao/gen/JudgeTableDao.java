package com.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.seatrend.routinginspection.db.table.JudgeTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JUDGE_TABLE".
*/
public class JudgeTableDao extends AbstractDao<JudgeTable, Long> {

    public static final String TABLENAME = "JUDGE_TABLE";

    /**
     * Properties of entity JudgeTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lsh = new Property(1, String.class, "lsh", false, "LSH");
        public final static Property Rwbh = new Property(2, String.class, "rwbh", false, "RWBH");
        public final static Property Rwmc = new Property(3, String.class, "rwmc", false, "RWMC");
        public final static Property Rwcjr = new Property(4, String.class, "rwcjr", false, "RWCJR");
        public final static Property Rwcjsj = new Property(5, String.class, "rwcjsj", false, "RWCJSJ");
        public final static Property Rwxgsj = new Property(6, String.class, "rwxgsj", false, "RWXGSJ");
        public final static Property Rwms = new Property(7, String.class, "rwms", false, "RWMS");
        public final static Property Rwzt = new Property(8, String.class, "rwzt", false, "RWZT");
        public final static Property Rwzxjg = new Property(9, String.class, "rwzxjg", false, "RWZXJG");
        public final static Property Rwid = new Property(10, String.class, "rwid", false, "RWID");
        public final static Property Glbm = new Property(11, String.class, "glbm", false, "GLBM");
        public final static Property Rwzxr = new Property(12, String.class, "rwzxr", false, "RWZXR");
    }

    private Query<JudgeTable> planTable_JudgeTableListQuery;

    public JudgeTableDao(DaoConfig config) {
        super(config);
    }
    
    public JudgeTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JUDGE_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LSH\" TEXT," + // 1: lsh
                "\"RWBH\" TEXT," + // 2: rwbh
                "\"RWMC\" TEXT," + // 3: rwmc
                "\"RWCJR\" TEXT," + // 4: rwcjr
                "\"RWCJSJ\" TEXT," + // 5: rwcjsj
                "\"RWXGSJ\" TEXT," + // 6: rwxgsj
                "\"RWMS\" TEXT," + // 7: rwms
                "\"RWZT\" TEXT," + // 8: rwzt
                "\"RWZXJG\" TEXT," + // 9: rwzxjg
                "\"RWID\" TEXT," + // 10: rwid
                "\"GLBM\" TEXT," + // 11: glbm
                "\"RWZXR\" TEXT);"); // 12: rwzxr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JUDGE_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JudgeTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String rwbh = entity.getRwbh();
        if (rwbh != null) {
            stmt.bindString(3, rwbh);
        }
 
        String rwmc = entity.getRwmc();
        if (rwmc != null) {
            stmt.bindString(4, rwmc);
        }
 
        String rwcjr = entity.getRwcjr();
        if (rwcjr != null) {
            stmt.bindString(5, rwcjr);
        }
 
        String rwcjsj = entity.getRwcjsj();
        if (rwcjsj != null) {
            stmt.bindString(6, rwcjsj);
        }
 
        String rwxgsj = entity.getRwxgsj();
        if (rwxgsj != null) {
            stmt.bindString(7, rwxgsj);
        }
 
        String rwms = entity.getRwms();
        if (rwms != null) {
            stmt.bindString(8, rwms);
        }
 
        String rwzt = entity.getRwzt();
        if (rwzt != null) {
            stmt.bindString(9, rwzt);
        }
 
        String rwzxjg = entity.getRwzxjg();
        if (rwzxjg != null) {
            stmt.bindString(10, rwzxjg);
        }
 
        String rwid = entity.getRwid();
        if (rwid != null) {
            stmt.bindString(11, rwid);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(12, glbm);
        }
 
        String rwzxr = entity.getRwzxr();
        if (rwzxr != null) {
            stmt.bindString(13, rwzxr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JudgeTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String rwbh = entity.getRwbh();
        if (rwbh != null) {
            stmt.bindString(3, rwbh);
        }
 
        String rwmc = entity.getRwmc();
        if (rwmc != null) {
            stmt.bindString(4, rwmc);
        }
 
        String rwcjr = entity.getRwcjr();
        if (rwcjr != null) {
            stmt.bindString(5, rwcjr);
        }
 
        String rwcjsj = entity.getRwcjsj();
        if (rwcjsj != null) {
            stmt.bindString(6, rwcjsj);
        }
 
        String rwxgsj = entity.getRwxgsj();
        if (rwxgsj != null) {
            stmt.bindString(7, rwxgsj);
        }
 
        String rwms = entity.getRwms();
        if (rwms != null) {
            stmt.bindString(8, rwms);
        }
 
        String rwzt = entity.getRwzt();
        if (rwzt != null) {
            stmt.bindString(9, rwzt);
        }
 
        String rwzxjg = entity.getRwzxjg();
        if (rwzxjg != null) {
            stmt.bindString(10, rwzxjg);
        }
 
        String rwid = entity.getRwid();
        if (rwid != null) {
            stmt.bindString(11, rwid);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(12, glbm);
        }
 
        String rwzxr = entity.getRwzxr();
        if (rwzxr != null) {
            stmt.bindString(13, rwzxr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JudgeTable readEntity(Cursor cursor, int offset) {
        JudgeTable entity = new JudgeTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lsh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rwbh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rwmc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rwcjr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rwcjsj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rwxgsj
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rwms
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rwzt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rwzxjg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rwid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // glbm
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // rwzxr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JudgeTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLsh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRwbh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRwmc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRwcjr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRwcjsj(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRwxgsj(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRwms(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRwzt(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRwzxjg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRwid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGlbm(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRwzxr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JudgeTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JudgeTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JudgeTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "judgeTableList" to-many relationship of PlanTable. */
    public List<JudgeTable> _queryPlanTable_JudgeTableList(String lsh) {
        synchronized (this) {
            if (planTable_JudgeTableListQuery == null) {
                QueryBuilder<JudgeTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Lsh.eq(null));
                planTable_JudgeTableListQuery = queryBuilder.build();
            }
        }
        Query<JudgeTable> query = planTable_JudgeTableListQuery.forCurrentThread();
        query.setParameter(0, lsh);
        return query.list();
    }

}
