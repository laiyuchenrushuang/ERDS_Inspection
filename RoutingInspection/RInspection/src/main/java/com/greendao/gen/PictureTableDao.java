package com.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.seatrend.routinginspection.db.table.PictureTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PICTURE_TABLE".
*/
public class PictureTableDao extends AbstractDao<PictureTable, Long> {

    public static final String TABLENAME = "PICTURE_TABLE";

    /**
     * Properties of entity PictureTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lsh = new Property(1, String.class, "lsh", false, "LSH");
        public final static Property ZpPath = new Property(2, String.class, "zpPath", false, "ZP_PATH");
        public final static Property Glbm = new Property(3, String.class, "glbm", false, "GLBM");
        public final static Property ZpId = new Property(4, String.class, "zpId", false, "ZP_ID");
    }

    private Query<PictureTable> planTable_PictureTableListQuery;

    public PictureTableDao(DaoConfig config) {
        super(config);
    }
    
    public PictureTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PICTURE_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LSH\" TEXT," + // 1: lsh
                "\"ZP_PATH\" TEXT," + // 2: zpPath
                "\"GLBM\" TEXT," + // 3: glbm
                "\"ZP_ID\" TEXT);"); // 4: zpId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PICTURE_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PictureTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String zpPath = entity.getZpPath();
        if (zpPath != null) {
            stmt.bindString(3, zpPath);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(4, glbm);
        }
 
        String zpId = entity.getZpId();
        if (zpId != null) {
            stmt.bindString(5, zpId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PictureTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(2, lsh);
        }
 
        String zpPath = entity.getZpPath();
        if (zpPath != null) {
            stmt.bindString(3, zpPath);
        }
 
        String glbm = entity.getGlbm();
        if (glbm != null) {
            stmt.bindString(4, glbm);
        }
 
        String zpId = entity.getZpId();
        if (zpId != null) {
            stmt.bindString(5, zpId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PictureTable readEntity(Cursor cursor, int offset) {
        PictureTable entity = new PictureTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lsh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zpPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // glbm
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // zpId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PictureTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLsh(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZpPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGlbm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZpId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PictureTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PictureTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PictureTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pictureTableList" to-many relationship of PlanTable. */
    public List<PictureTable> _queryPlanTable_PictureTableList(String lsh) {
        synchronized (this) {
            if (planTable_PictureTableListQuery == null) {
                QueryBuilder<PictureTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Lsh.eq(null));
                planTable_PictureTableListQuery = queryBuilder.build();
            }
        }
        Query<PictureTable> query = planTable_PictureTableListQuery.forCurrentThread();
        query.setParameter(0, lsh);
        return query.list();
    }

}
